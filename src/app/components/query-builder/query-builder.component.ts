import {
  Component,
  Input,
  OnInit,
  ViewChild,
  OnChanges,
  SimpleChanges,
} from '@angular/core';
import { FormBuilder, FormControl, FormGroup, NgForm } from '@angular/forms';
import moment, { max } from 'moment';
import {
  QueryBuilderClassNames,
  QueryBuilderConfig,
} from 'ngx-angular-query-builder';

const today = new Date();
const month = today.getMonth();
const year = today.getFullYear();

@Component({
  selector: 'app-query-builder',
  standalone: false,
  templateUrl: './query-builder.component.html',
  styleUrl: './query-builder.component.scss',
})
export class QueryBuilderComponent implements OnInit, OnChanges {
  campaignOne: FormGroup = new FormGroup({
    start: new FormControl(moment()), // Use moment() instead of new Date()
    end: new FormControl(moment().add(7, 'days')), // Add 7 days as an example
  });
  emptyRulesetMessage =
    'Please add condition, condition group cannot be left empty ';
  @ViewChild('f', { static: true })
  queryBuilderFormGroup!: NgForm;
  public selectedValue: any;
  @Input() public selectedItem: any;

  // Toggle Button options
  customValue: string = 'yes';
  directValue: string = 'include';

  onChange(value: string) {
    console.log('Ruleset condition changed:', value);
    // Add any additional logic here
  }

  onDirectValueChange(value: string) {
    console.log('Direct value changed:', value);
    // Add any additional logic here
  }

  public queryCtrl: FormControl;

  public bootstrapClassNames: QueryBuilderClassNames = {
    removeIcon: 'fa fa-minus',
    addIcon: 'fa fa-plus',
    arrowIcon: 'fa fa-chevron-right px-2',
    button: 'btn',
    buttonGroup: 'btn-group',
    rightAlign: 'order-12 ml-auto',
    switchRow: 'd-flex px-2',
    switchGroup: 'd-flex align-items-center',
    switchRadio: 'custom-control-input',
    switchLabel: 'custom-control-label',
    switchControl: 'custom-control custom-radio custom-control-inline',
    row: 'row p-2 m-1',
    rule: 'border',
    ruleSet: 'border',
    invalidRuleSet: 'alert alert-danger',
    emptyWarning: 'text-danger mx-auto',
    operatorControl: 'form-control',
    operatorControlSize: 'col-auto pr-0',
    fieldControl: 'form-control',
    fieldControlSize: 'col-auto pr-0',
    entityControl: 'form-control',
    entityControlSize: 'col-auto pr-0',
    inputControl: 'form-control',
    inputControlSize: 'col-auto',
  };

  public query = {
    condition: 'and',
    rules: [
      {
        // This will be replaced with specific field/values based on the selected configuration
        field: '',
        operator: '',
        value: null,
      },
    ],
  };

  // CI_PER configuration
  public ciPerConfig: QueryBuilderConfig = {
    fields: {
      PER_ID: {
        name: 'PER_ID',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },

      DATE: {
        name: 'DATE',
        type: 'date',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
        options: [
          {
            name: 'Date of Ranges',
            value: 'DATE_OF_RANGES',
          },
        ],
      },
      LANGUAGE_CD: {
        name: 'LANGUAGE_CD',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
        options: [],
      },
      PER_OR_BUS_FLG: {
        name: 'PER_OR_BUS_FLG',
        type: 'category',
        options: [
          { name: 'Person', value: 'P' },
          { name: 'Business', value: 'B' },
        ],
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      LS_SL_FLG: {
        name: 'LS_SL_FLG',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      LS_SL_DESCR: {
        name: 'LS_SL_DESCR',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      EMAILID: {
        name: 'EMAILID',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      OVRD_MAIL_NAME1: {
        name: 'OVRD_MAIL_NAME1',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      OVRD_MAIL_NAME2: {
        name: 'OVRD_MAIL_NAME2',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      OVRD_MAIL_NAME3: {
        name: 'OVRD_MAIL_NAME3',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      ADDRESS1: {
        name: 'ADDRESS1',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      ADDRESS2: {
        name: 'ADDRESS2',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      ADDRESS3: {
        name: 'ADDRESS3',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      ADDRESS4: {
        name: 'ADDRESS4',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      CITY: {
        name: 'CITY',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      NUM1: {
        name: 'NUM1',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      NUM2: {
        name: 'NUM2',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      COUNTY: {
        name: 'COUNTY',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      POSTAL: {
        name: 'POSTAL',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      HOUSE_TYPE: {
        name: 'HOUSE_TYPE',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      GEO_CODE: {
        name: 'GEO_CODE',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      IN_CITY_LIMIT: {
        name: 'IN_CITY_LIMIT',
        type: 'boolean',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      STATE: {
        name: 'STATE',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      COUNTRY: { name: 'COUNTRY', type: 'string' },
      VERSION: {
        name: 'VERSION',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      RECV_MKTG_INFO_FLG: {
        name: 'RECV_MKTG_INFO_FLG',
        type: 'boolean',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      WEB_PASSWD: { name: 'WEB_PASSWD', type: 'string' },
      WEB_PWD_HINT_FLG: { name: 'WEB_PWD_HINT_FLG', type: 'string' },
      WEB_PASSWD_ANS: {
        name: 'WEB_PASSWD_ANS',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      PER_DATA_AREA: {
        name: 'PER_DATA_AREA',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
    },
  };
  // CI_PER_NAME configuration
  public ciPerNameConfig: QueryBuilderConfig = {
    fields: {
      PER_ID: {
        name: 'PER_ID',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      SEQ_NUM: {
        name: 'SEQ_NUM',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      ENTITY_NAME: {
        name: 'ENTITY_NAME',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      VERSION: {
        name: 'VERSION',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      PRIM_NAME_SW: {
        name: 'PRIM_NAME_SW',
        type: 'string',
        nullable: true,
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      ENTITY_NAME_UPR: {
        name: 'ENTITY_NAME_UPR',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
    },
  };

  public ciPerAddreasConfig: QueryBuilderConfig = {
    fields: {
      PER_ID: {
        name: 'PER_ID',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      SEQ_NUM: {
        name: 'SEQ_NUM',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      ADDRESS1: {
        name: 'ADDRESS 1',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      ADDRESS2: {
        name: 'ADDRESS 2',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      ADDRESS3: {
        name: 'ADDRESS 3',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      ADDRESS4: {
        name: 'ADDRESS 4',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      CITY: {
        name: 'CITY',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      NUM1: {
        name: 'NUM1',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      NUM2: {
        name: 'NUM2',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      COUNTY: {
        name: 'COUNTY',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      POSTAL: {
        name: 'POSTAL',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      HOUSE_TYPE: {
        name: 'HOUSE_TYPE',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      GEO_CODE: {
        name: 'GEO_CODE',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      IN_CITY_LIMIT: {
        name: 'IN_CITY_LIMIT',
        type: 'boolean',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      STATE: {
        name: 'STATE',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      COUNTRY: {
        name: 'COUNTRY',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      VERSION: {
        name: 'VERSION',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      SEASON_START_MMDD: {
        name: 'SEASON_START_MMDD',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      SEASON_END_MMDD: {
        name: 'SEASON_END_MMDD',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      EFF_STATUS: {
        name: 'EFF_STATUS',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
    },
  };

  public ciPerContdetConfig: QueryBuilderConfig = {
    fields: {
      C1_CONTACT_ID: {
        name: 'C1_CONTACT_ID',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      PER_ID: {
        name: 'PER_ID',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      COMM_RTE_TYPE_CD: {
        name: 'COMM_RTE_TYPE_CD',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      CONTACT_VALUE: {
        name: 'CONTACT_VALUE',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      CND_PRIMARY_FLAG: {
        name: 'CND_PRIMARY_FLAG',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      CONTACT_VALUE_EXT: {
        name: 'CONTACT_VALUE_EXT',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      DND_START_TM: {
        name: 'DND_START_TM',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      DND_END_TM: {
        name: 'DND_END_TM',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      CND_VERIFY_STATUS_FLAG: {
        name: 'CND_VERIFY_STATUS_FLAG',
        type: 'boolean',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      CND_ACTINACT_FLG: {
        name: 'CND_ACTINACT_FLG',
        type: 'boolean',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      CONTACT_NAME: {
        name: 'CONTACT_NAME',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      VERSION: {
        name: 'VERSION',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
    },
  };

  public ciPerCharConfig: QueryBuilderConfig = {
    fields: {
      PER_ID: {
        name: 'PER_ID',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      CHAR_TYPE_CD: {
        name: 'CHAR_TYPE_CD',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      CHAR_VAL: {
        name: 'CHAR_VAL',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      EFFDT: {
        name: 'EFFDT',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      ADHOC_CHAR_VAL: {
        name: 'ADHOC_CHAR_VAL',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      VERSION: {
        name: 'VERSION',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      CHAR_VAL_FK1: {
        name: 'CHAR_VAL_FK1',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      CHAR_VAL_FK2: {
        name: 'CHAR_VAL_FK2',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      CHAR_VAL_FK3: {
        name: 'CHAR_VAL_FK3',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      CHAR_VAL_FK4: {
        name: 'CHAR_VAL_FK4',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      CHAR_VAL_FK5: {
        name: 'CHAR_VAL_FK5',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      SRCH_CHAR_VAL: {
        name: 'SRCH_CHAR_VAL',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
    },
  };
  public ciPerIdConfig: QueryBuilderConfig = {
    fields: {
      PER_ID: {
        name: 'PER_ID',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      ID_TYPE_CD: {
        name: 'ID_TYPE_CD',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      PER_ID_NBR: {
        name: 'PER_ID_NBR',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      PRIM_SW: {
        name: 'PRIM_SW',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      VERSION: {
        name: 'VERSION',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      ENCR_PER_ID_NBR: {
        name: 'ENCR_PER_ID_NBR',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      HASH_PER_ID_NBR: {
        name: 'HASH_PER_ID_NBR',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
    },
  };
  // CI_PER configuration
  public ciAccountsConfig: QueryBuilderConfig = {
    fields: {
      PER_ID: {
        name: 'PER_ID',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },

      DATE: {
        name: 'DATE',
        type: 'date',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
        options: [
          {
            name: 'Date of Ranges',
            value: 'DATE_OF_RANGES',
          },
        ],
      },
      LANGUAGE_CD: {
        name: 'LANGUAGE_CD',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
        options: [],
      },
      PER_OR_BUS_FLG: {
        name: 'PER_OR_BUS_FLG',
        type: 'category',
        options: [
          { name: 'Person', value: 'P' },
          { name: 'Business', value: 'B' },
        ],
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      LS_SL_FLG: {
        name: 'LS_SL_FLG',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      LS_SL_DESCR: {
        name: 'LS_SL_DESCR',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      EMAILID: {
        name: 'EMAILID',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      OVRD_MAIL_NAME1: {
        name: 'OVRD_MAIL_NAME1',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      OVRD_MAIL_NAME2: {
        name: 'OVRD_MAIL_NAME2',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      OVRD_MAIL_NAME3: {
        name: 'OVRD_MAIL_NAME3',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      ADDRESS1: {
        name: 'ADDRESS1',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      ADDRESS2: {
        name: 'ADDRESS2',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      ADDRESS3: {
        name: 'ADDRESS3',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      ADDRESS4: {
        name: 'ADDRESS4',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      CITY: {
        name: 'CITY',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      NUM1: {
        name: 'NUM1',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      NUM2: {
        name: 'NUM2',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      COUNTY: {
        name: 'COUNTY',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      POSTAL: {
        name: 'POSTAL',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      HOUSE_TYPE: {
        name: 'HOUSE_TYPE',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      GEO_CODE: {
        name: 'GEO_CODE',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      IN_CITY_LIMIT: {
        name: 'IN_CITY_LIMIT',
        type: 'boolean',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      STATE: {
        name: 'STATE',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      COUNTRY: { name: 'COUNTRY', type: 'string' },
      VERSION: {
        name: 'VERSION',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      RECV_MKTG_INFO_FLG: {
        name: 'RECV_MKTG_INFO_FLG',
        type: 'boolean',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      WEB_PASSWD: { name: 'WEB_PASSWD', type: 'string' },
      WEB_PWD_HINT_FLG: { name: 'WEB_PWD_HINT_FLG', type: 'string' },
      WEB_PASSWD_ANS: {
        name: 'WEB_PASSWD_ANS',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
      PER_DATA_AREA: {
        name: 'PER_DATA_AREA',
        type: 'string',
        operators: [
          '=',
          '!=',
          '<',
          '>',
          '<=',
          '>=',
          'BETWEEN',
          'NOT LIKE',
          'LIKE',
          'NOT IN',
          'IN',
          'IS_NULL',
          'IS_NOT_NULL',
        ],
      },
    },
  };
  public currentConfig: QueryBuilderConfig;
  public allowRuleset: boolean = true;
  public allowCollapse: boolean = true;
  public persistValueOnFieldChange: boolean = false;

  constructor(private formBuilder: FormBuilder) {
    this.queryCtrl = this.formBuilder.control(this.query);
    this.currentConfig = this.ciPerConfig;
  }

  ngOnInit(): void {
    this.updateConfigBasedOnSelectedItem();
  }

  ngOnChanges(changes: SimpleChanges): void {
    if (changes['selectedItem']) {
      this.updateConfigBasedOnSelectedItem();
    }
  }

  updateConfigBasedOnSelectedItem(): void {
    // Update configuration based on selected item
    switch (this.selectedItem) {
      case 'CI_PER':
        this.currentConfig = this.ciPerConfig;
        break;
      case 'CI_ACCOUNTS':
        this.currentConfig = this.ciAccountsConfig;
        break;
      case 'CI_PER_NAME':
        this.currentConfig = this.ciPerNameConfig;
        break;
      case 'CI_PER_ADDR_SEAS':
        this.currentConfig = this.ciPerAddreasConfig;
        break;
      case 'CI_PER_CONTDET':
        this.currentConfig = this.ciPerContdetConfig;
        break;
      case 'CI_PER_CHAR':
        this.currentConfig = this.ciPerCharConfig;
        break;
      case 'CI_PER_ID':
        this.currentConfig = this.ciPerIdConfig;
        break;

      default:
        this.currentConfig = this.ciPerConfig; // Use default config if no match
        break;
    }

    // Create a default rule with the first field from the current configuration
    const firstField = Object.keys(this.currentConfig.fields)[0];
    const fieldConfig = this.currentConfig.fields[firstField];
    const defaultOperator = fieldConfig.operators
      ? fieldConfig.operators[0]
      : '=';

    // Initialize with a default value appropriate for the field type
    let defaultValue;
    switch (fieldConfig.type) {
      case 'string':
        defaultValue = '';
        break;
      case 'number':
        defaultValue = 0;
        break;
      case 'boolean':
        defaultValue = false;
        break;
      case 'category':
        defaultValue =
          fieldConfig.options && fieldConfig.options.length > 0
            ? fieldConfig.options[0].value
            : null;
        break;
      case 'multiselect':
        defaultValue = [];
        break;
      case 'date':
        if (
          fieldConfig.options &&
          fieldConfig.options.some((opt) => opt.value === 'PERCENTAGE_OF_ROWS')
        ) {
          defaultValue = { strategy: 'PERCENTAGE_OF_ROWS', percentage: 50 };
        } else {
          defaultValue = null;
        }
        break;
      default:
        defaultValue = null;
    }

    // Reset query with the new default rule
    this.query = {
      condition: 'and',
      rules: [
        {
          field: firstField,
          operator: defaultOperator,
          value: defaultValue,
        },
      ],
    };

    // Update form control with new query
    this.queryCtrl = this.formBuilder.control(this.query);
  }

  ngAfterViewInit() {
    setTimeout(() => this.queryBuilderFormGroup.form.markAllAsTouched(), 0);
  }

  // switchModes(event: Event) {
  //   this.currentConfig = (<HTMLInputElement>event.target).checked
  //     ? this.entityConfig
  //     : this.config;
  // }

  changeDisabled(event: Event) {
    (<HTMLInputElement>event.target).checked
      ? this.queryCtrl.disable()
      : this.queryCtrl.enable();
  }

  private _counter = 0;
  formRuleWeakMap = new WeakMap();

  getUniqueName(prefix: string, rule: any) {
    if (!this.formRuleWeakMap.has(rule)) {
      this.formRuleWeakMap.set(rule, `${prefix}-${++this._counter}`);
    }

    return this.formRuleWeakMap.get(rule);
  }

  execute() {
    console.log('query builder form group', this.queryCtrl.value);
  }
}
